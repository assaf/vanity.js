<ol id="stream" class="stream">
</ol>
<aside>
  <h2>Actions</h2>
  <ol id="verbs" class="verb-selector">
  </ol>
  <small>All/only actions that are On will show in stream</small>
  <h2>Labels</h2>
  <ol id="labels" class="label-selector">
  </ol>
  <small>Only activities with *all* selected labels will show in stream.
  All activities show when no labels selected.</small>
</aside>
<script>
$(function() { 

  // -- Activities --

  // How many recent activites to show.
  var RECENT = 1000;
  // How many activities to keep on page.
  var MAXIMUM = 10000;
  // We operate on all activities, but generally interested in most recent.
  var activities = [];
  // Group verbs and labels.
  var verbs = {},
      labels = {};


  // Add new activity to the top of the stream.
  function add(activity, fn) {
    // Add new activity at the top (most recent), and only keep MAXIMUM around.
    fn.call(activities, activity);
    var verb = activity.verb;
    verbs[verb] = (verbs[verb] || 0) + 1;
    activity.labels.forEach(function(label) {
      labels[label] = (labels[label] || 0) + 1;
    });

    // Remove until we have no more than maximum.
    while (activities.length > MAXIMUM) {
      var removing = activities[activities.length - 1];
      activities = activities.slice(0, activities.length - 1);
      verb = removing.verb;
      count = verbs[verb];
      if (count > 1)
        verbs[verb] = count - 1;
      else
        delete verbs[verb];
      removing.labels.forEach(function(label) {
        var count = labels[label];
        if (count > 1)
          labels[label] = count - 1;
        else
          delete labels[label];
      }) 
    }
  }

 
  // Render most recent activities.
  //
  // highlight - If true, highlight the activity for a few seconds
  function renderActivities(highlight) {
    // From the top N activities, select only the ones showing based on their
    // verb.  If there is no specific entry in verbsShowing, we default to
    // "other".
    var showing = filterLabels(filterVerbs(activities));

    // For each activity we add an LI element.  To highlight, we set the class
    // `highlight` and then quickly remove it, which causes a CSS transition.
    var list = d3.select("#stream"),
        selection = list.selectAll("li")
                      .data(showing, function(d) { return d.id }),
        li = selection.enter().append("li");
    li.html(function(d) {
      return d.html.replace(/(<time.*>).*(<\/time>)/, function(_, head, tail) {
        return head + Date.create(d.published)
                        .format("{Weekday}, {Mon} {d} {h}:{mm} {TT}") + tail
      })
    });
    li.selectAll("div").append("span").attr("class", "color");
    if (highlight)
      li.attr("class", "highlight").transition().delay(1).attr("class", "")
    // Set the color of each activity based on its verb.
    selection.select(".color")
      .style("background-color", function(d) { return verbColor(d.verb); })
    selection.exit().remove();
    selection.order();
  }


  // -- Verbs --

  // How many verbs you can show/hide.
  var TOP_VERBS = 10;
  // Color scale - each verb gets its own distinct color.
  var VERB_COLORS = d3.scale.category20c();

  // Keep track of which verbs are showing.
  var verbsShowing = {};


  // Returns a group with the top verbs.
  function topVerbs() {
    var list = [];
    for (key in verbs)
      list.push({ key: key, values: verbs[key] })
    return list
      .sort(function(a, b) { return b.values - a.values })
      .slice(0, TOP_VERBS);
  }

  // Filters and returns only activities that should show based on selected
  // filter.
  function filterVerbs(activities) {
    return activities.filter(function(activity) {
      var showing = verbsShowing[activity.verb];
      if (showing == undefined)
        showing = verbsShowing["other"];
      return showing;
    })
  }

  // Return color for a verb.
  //
  // verb  - The verb you're looking to color
  //
  // Returns color suitable for styling an element (rgba).
  function verbColor(verb) {
    var index = topVerbs().map(function(verb) { return verb.key }).indexOf(verb),
        color = (index >= 0) ? VERB_COLORS(index) : "#ccc",
        rgb = d3.rgb(color);
    return "rgba(" + rgb.r + "," + rgb.g + "," + rgb.b + ",0.5)"
  }



  // Renders the verb selector: shows the msot popular verbs with option to
  // show/hide each one.
  function renderVerbs() {
    // The verbs we're going to show include "other" as the last item, but that
    // other is not part of the computed group.
    var with_other = topVerbs().concat({ key: "other" });
    // Make sure all verbs are showing by default.
    verbsShowing = with_other.reduce(function(showing, verb) {
      showing[verb.key] = verbsShowing[verb.key];
      if (showing[verb.key] == undefined)
        showing[verb.key] = true;
      return showing;
    }, {})

    // For each new verb we add an LI and inside a link to show/hide and a span
    // to show the color-coded verb name.
    var list = d3.select("#verbs"),
        selection = list.selectAll("li").data(with_other, function(d) { return d.key }),
        li = selection.enter().append("li");
    li.append("a")
      .attr("class", "show")
      .on("click", function(d) {
        d3.event.stopPropagation();
        // If the class is "show", we're showing the verb. Flip class to hide
        // and turn verbsShowing off.
        if (this.className == "show") {
          this.className = "hide";
          verbsShowing[d.key] = false;
        } else {
          this.className = "show";
          verbsShowing[d.key] = true;
        }
        // Update all activities accordingly.
        renderActivities();
        return false;
      });
    li.append("span")
      .text(function(d) { return d.key })
      .style("background-color", function(d) { return verbColor(d.key) });
    selection.exit().remove();
  }


  // -- Labels --

  var labelsFilter = {};
  var TOP_LABELS = 20;


  // Returns a group with the top labels.
  function topLabels() {
    var list = [];
    for (key in labels)
      list.push({ key: key, values: labels[key] })
    return list
      .sort(function(a, b) { return b.values - a.values })
      .slice(0, TOP_LABELS);
  }


  // Filters and returns only activities that should show based on selected
  // labels.
  function filterLabels(activities) {
    var need = Object.keys(labelsFilter),
        count = need.length;
    if (count == 0)
      return activities;
    else
      return activities.filter(function(activity) {
        return activity.labels.intersect(need).length == count;
      })
  }


  function renderLabels() {
    var list = d3.select("#labels"),
        selection = list.selectAll("li").data(topLabels(), function(d) { return d.key }),
        li = selection.enter().append("li");
    li.append("a")
      .on("click", function(d) {
        d3.event.stopPropagation();
        // If the element has the class 'require', we're filtering by this
        // element: clicking on it removes the class and the filter.
        if (this.className == "require") {
          this.className = "";
          delete labelsFilter[d.key];
        } else {
          // Add class 'require' and filter.
          this.className = "require";
          labelsFilter[d.key] = false;
        }
        // Update all activities accordingly.
        renderActivities();
        return false;
      });
    li.append("span")
      .text(function(d) { return d.key })
      .style("background-color", function(d) { return verbColor(d.key) });
    selection.exit().remove();
  }



  // -- Updating --

  // Refresh.  Updates verbs and activities, renders new stuff.
  //
  // highlight - If true, highlight the activity for a few seconds
  function refresh(highlight) {
    renderVerbs();
    renderLabels();
    renderActivities(highlight);
  }

  // Load most recent activities.   This done once at page loading time and we
  // use this to show the initial activity list.
  $.getJSON("/v1/activity", { limit: RECENT }, function(result) {
    for (i in result.items)
      add(result.items[i], Array.prototype.push);
    refresh();
  });

  // Connect to event source, get notifies of new activities and show them.
  var es = new EventSource("/v1/activity/stream");
  es.addEventListener("activity", function(event) {
    add(JSON.parse(event.data), Array.prototype.unshift);
    refresh(true); // highlight
  });

})
</script>
